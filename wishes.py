from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import add_wish, get_user_wishes, get_user_room, update_wish
import logging
from sqlalchemy.orm import Session
from database import User, Wish
from telegram.ext import ConversationHandler

logger = logging.getLogger(__name__)

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è", callback_data="edit_wish")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∂–µ–ª–∞–Ω–∏—è", callback_data="list_wishes")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_wish_actions_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å –∂–µ–ª–∞–Ω–∏—è–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è", callback_data="edit_wish")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∂–µ–ª–∞–Ω–∏—è", callback_data="list_wishes")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_wish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–µ—Ç –∂–µ–ª–∞–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
    session = Session()
    try:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if not user or not user.room:
            update.message.reply_text(
                "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é."
            )
            return ConversationHandler.END
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–Ω–∏–π
        current_wishes = session.query(Wish).filter(Wish.user_id == user.id).count()
        if current_wishes >= user.room.max_wishes:
            update.message.reply_text(
                f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∂–µ–ª–∞–Ω–∏–π ({user.room.max_wishes}). "
                "–£–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ."
            )
            return ConversationHandler.END
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∂–µ–ª–∞–Ω–∏—è
        wish_text = update.message.text
        wish_id = add_wish(user_id, wish_text)
        
        if wish_id:
            update.message.reply_text(
                "–í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! üéâ\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –∂–µ–ª–∞–Ω–∏–π: {user.room.max_wishes - current_wishes - 1}"
            )
        else:
            update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return ConversationHandler.END
    finally:
        session.close()

async def handle_wish_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∂–µ–ª–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    wish_text = update.message.text
    
    if add_wish(user_id, wish_text):
        await update.message.reply_text(
            "‚úÖ –ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=get_wish_actions_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∂–µ–ª–∞–Ω–∏–π."
        )
    
    context.user_data['state'] = None

async def edit_wish_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    wishes = get_user_wishes(user_id)
    
    if not wishes:
        await update.callback_query.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        return
        
    keyboard = []
    for wish in wishes:
        keyboard.append([
            InlineKeyboardButton(
                f"‚úèÔ∏è {wish.text[:30]}...",
                callback_data=f"edit_wish_{wish.id}"
            )
        ])
    
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def list_wishes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    room = get_user_room(user_id)
    
    if not room:
        await update.callback_query.message.reply_text(
            "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ."
        )
        return
        
    wishes = get_user_wishes(user_id)
    if not wishes:
        await update.callback_query.message.reply_text(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π.",
            reply_markup=get_wish_actions_keyboard()
        )
        return
        
    message = "üìã –í–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è:\n\n"
    for i, wish in enumerate(wishes, 1):
        message += f"{i}. {wish.text}\n"
        
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    message += f"\nüè† –ö–æ–º–Ω–∞—Ç–∞: {room['name']}\n"
    message += f"üéÅ –ú–∞–∫—Å–∏–º—É–º –∂–µ–ª–∞–Ω–∏–π: {room['wishes_per_user']}\n"
    message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {room['current_users']}/{room['max_participants']}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∂–µ–ª–∞–Ω–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è", callback_data="edit_wish")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
        
    await update.callback_query.message.reply_text(
        message,
        reply_markup=reply_markup
    )
