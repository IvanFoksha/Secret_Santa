import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import add_wish, get_user_wishes, get_user_room, update_wish, Session, engine, get_wish
from sqlalchemy.orm import Session as SQLAlchemySession
from database import User, Wish, Room
from telegram.ext import ConversationHandler
from keyboards import get_wish_actions_keyboard

logger = logging.getLogger(__name__)

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è", callback_data="edit_wish")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∂–µ–ª–∞–Ω–∏—è", callback_data="list_wishes")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_wish_actions_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å –∂–µ–ª–∞–Ω–∏—è–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è", callback_data="edit_wish")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∂–µ–ª–∞–Ω–∏—è", callback_data="list_wishes")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def create_wish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–µ—Ç –∂–µ–ª–∞–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
    session = Session()
    try:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if not user or not user.room_id:
            await update.callback_query.message.reply_text(
                "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é."
            )
            return ConversationHandler.END
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–Ω–∏–π
        current_wishes = session.query(Wish).filter(
            Wish.user_id == user.id,
            Wish.room_id == user.room_id
        ).count()
        
        if current_wishes >= user.room.max_wishes:
            await update.callback_query.message.reply_text(
                f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∂–µ–ª–∞–Ω–∏–π ({user.room.max_wishes}). "
                "–£–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ."
            )
            return ConversationHandler.END
            
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∂–µ–ª–∞–Ω–∏—è
        await update.callback_query.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è:"
        )
        context.user_data['waiting_for'] = 'wish'
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è: {e}")
        await update.callback_query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return ConversationHandler.END
    finally:
        session.close()

async def handle_wish_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∂–µ–ª–∞–Ω–∏—è"""
    if not context.user_data.get('waiting_for') == 'wish':
        return
        
    user_id = update.effective_user.id
    wish_text = update.message.text
    
    session = Session()
    try:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if not user or not user.room_id:
            await update.message.reply_text(
                "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é."
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–Ω–∏–π
        current_wishes = session.query(Wish).filter(
            Wish.user_id == user.id,
            Wish.room_id == user.room_id
        ).count()
        
        if current_wishes >= user.room.max_wishes:
            await update.message.reply_text(
                f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∂–µ–ª–∞–Ω–∏–π ({user.room.max_wishes}). "
                "–£–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ."
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–µ–ª–∞–Ω–∏–µ
        wish_id = add_wish(user_id, wish_text)
        
        if wish_id:
            await update.message.reply_text(
                "‚úÖ –ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
                reply_markup=get_wish_actions_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∂–µ–ª–∞–Ω–∏–π."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    finally:
        session.close()
        context.user_data['waiting_for'] = None

async def edit_wish_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç–∞
        user_room = get_user_room(user_id)
        if not user_room:
            await query.message.reply_text(
                "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. "
                "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        wishes = get_user_wishes(user_id, user_room['room_id'])
        if not wishes:
            await query.message.reply_text(
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π. "
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∂–µ–ª–∞–Ω–∏–µ."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–µ–ª–∞–Ω–∏—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = []
        for wish in wishes:
            keyboard.append([InlineKeyboardButton(
                f"‚úèÔ∏è {wish['text'][:30]}...",
                callback_data=f"edit_wish_{wish['id']}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data="main_menu"
        )])
        
        await query.message.edit_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è: {e}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def list_wishes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    room = get_user_room(user_id)
    
    if not room or room['room_id'] == 0:
        await update.callback_query.message.reply_text(
            "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    session = Session()
    try:
        db_room = session.query(Room).filter(Room.id == room['room_id']).first()
        if not db_room:
            await update.callback_query.message.reply_text(
                "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."
            )
            return
            
        wishes = get_user_wishes(user_id, room['room_id'])
        if not wishes:
            await update.callback_query.message.reply_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π.",
                reply_markup=get_wish_actions_keyboard()
            )
            return
        
        message = "üìã –í–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è:\n\n"
        for i, wish in enumerate(wishes, 1):
            message += f"{i}. {wish['text']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        message += f"\nüè† {db_room.name}\n"
        message += f"üéÅ –ú–∞–∫—Å–∏–º—É–º –∂–µ–ª–∞–Ω–∏–π: {db_room.max_wishes}\n"
        message += (
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {room['current_users']}/"
            f"{db_room.max_participants}\n"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        await update.callback_query.message.reply_text(
            message,
            reply_markup=get_wish_actions_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π: {e}")
        await update.callback_query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()

async def edit_specific_wish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"""
    query = update.callback_query
    wish_id = int(query.data.split('_')[2])
    user = query.from_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∂–µ–ª–∞–Ω–∏–µ
        wish = get_wish(wish_id)
        if not wish:
            await query.message.reply_text(
                "‚ùå –ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ."
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        session = Session()
        db_user = session.query(User).filter(User.telegram_id == user.id).first()
        if not db_user:
            await query.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if wish['user_id'] != db_user.id:
            await query.message.reply_text(
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∂–µ–ª–∞–Ω–∏—è."
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∂–µ–ª–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['editing_wish_id'] = wish_id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∂–µ–ª–∞–Ω–∏—è
        await query.message.edit_text(
            f"üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∂–µ–ª–∞–Ω–∏—è:\n{wish['text']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∂–µ–ª–∞–Ω–∏—è:"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è {wish_id}: {e}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        if 'session' in locals():
            session.close()

async def handle_edit_wish_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∂–µ–ª–∞–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    if 'editing_wish_id' not in context.user_data:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return
        
    wish_id = context.user_data['editing_wish_id']
    new_text = update.message.text
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        session = Session()
        db_user = session.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∂–µ–ª–∞–Ω–∏–µ
        wish = get_wish(wish_id)
        if not wish:
            await update.message.reply_text(
                "‚ùå –ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ."
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if wish['user_id'] != db_user.id:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∂–µ–ª–∞–Ω–∏—è."
            )
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∂–µ–ª–∞–Ω–∏–µ
        success = update_wish(wish_id, new_text)
        if success:
            await update.message.reply_text(
                "‚úÖ –ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=get_wish_actions_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è {wish_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('editing_wish_id', None)
        if 'session' in locals():
            session.close()
