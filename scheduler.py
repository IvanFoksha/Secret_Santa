import logging
from datetime import datetime, timedelta
from telegram.ext import Application
from database import get_room_wishes, mark_wish_as_viewed, get_all_active_rooms
from config import WISH_DELIVERY_HOUR

logger = logging.getLogger(__name__)


async def deliver_wishes(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∂–µ–ª–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è deliver_wishes")
    try:
        current_hour = datetime.now().hour
        if current_hour == WISH_DELIVERY_HOUR:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–µ–ª–∞–Ω–∏–π –≤ —á–∞—Å {WISH_DELIVERY_HOUR}")
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
            rooms = get_all_active_rooms()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(rooms)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç")
            
            for room in rooms:
                # –ü–æ–ª—É—á–∞–µ–º –∂–µ–ª–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã
                wishes = get_room_wishes(room['room_id'])
                logger.info(
                    f"–ö–æ–º–Ω–∞—Ç–∞ {room['room_id']}: –Ω–∞–π–¥–µ–Ω–æ {len(wishes)} –∂–µ–ª–∞–Ω–∏–π"
                )
                
                for wish in wishes:
                    # –û—Ç–º–µ—á–∞–µ–º –∂–µ–ª–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    mark_wish_as_viewed(wish['id'])
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–µ–ª–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                    await context.bot.send_message(
                        chat_id=wish['target_user_id'],
                        text=f"üéÅ –í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ: {wish['text']}"
                    )
                    logger.info(
                        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∂–µ–ª–∞–Ω–∏–µ ID {wish['id']} "
                        f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {wish['target_user_id']}"
                    )
        else:
            logger.debug(
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {current_hour}, "
                f"–ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–∂–∏–¥–∞–µ—Ç—Å—è {WISH_DELIVERY_HOUR})"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–µ–ª–∞–Ω–∏–π: {e}")


def setup_scheduler(application: Application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–µ–ª–∞–Ω–∏–π"""
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    job_queue = application.job_queue
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å
    job_queue.run_repeating(deliver_wishes, interval=timedelta(hours=1))
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
