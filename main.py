import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters
)
from start import start_command, help_command, button_handler
from rooms import (
    create_room_handler, join_room_handler, handle_room_code,
    handle_room_version, list_rooms, search_room, confirm_join_handler,
    handle_room_context_menu
)
from wishes import handle_wish_text, edit_wish_handler, handle_edit_wish_text
from database import init_bd, switch_room, get_room_by_id
from keyboards import get_main_menu_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")


async def switch_room_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∫–æ–º–Ω–∞—Ç–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ callback_data
    room_id = int(query.data.split('_')[2])
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    room = get_room_by_id(room_id)
    if not room:
        await query.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
    success = switch_room(user_id, room_id)
    
    if success:
        await query.message.reply_text(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∫–æ–º–Ω–∞—Ç—É!\n"
            f"üîë –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room['code']}\n"
            f"üÜî ID –∫–æ–º–Ω–∞—Ç—ã: {room['id']}",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await query.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.",
            reply_markup=get_main_menu_keyboard()
        )


async def message_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
    logger.info(
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context.user_data.get('waiting_for')}"
    )
    logger.info(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è: {context.user_data.get('editing_wish_id')}"
    )
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
    if context.user_data.get('waiting_for') == 'room_code':
        await handle_room_code(update, context)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –∂–µ–ª–∞–Ω–∏—è
    if context.user_data.get('waiting_for') == 'wish':
        await handle_wish_text(update, context)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è
    if context.user_data.get('waiting_for') == 'new_wish':
        await handle_wish_text(update, context)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if context.user_data.get('waiting_for') == 'edit_wish_room':
        await edit_wish_handler(update, context)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∂–µ–ª–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if context.user_data.get('waiting_for') == 'edit_wish_number':
        await edit_wish_handler(update, context)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∂–µ–ª–∞–Ω–∏—è
    if context.user_data.get('editing_wish_id'):
        await handle_edit_wish_text(update, context)
        return
    
    # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∏–∫–∞–∫–æ–≥–æ –≤–≤–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=get_main_menu_keyboard()
    )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_bd()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(
            CommandHandler("create_room", create_room_handler)
        )
        application.add_handler(
            CommandHandler("join_room", join_room_handler)
        )
        application.add_handler(
            CommandHandler("search_room", search_room)
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(
            CallbackQueryHandler(
                handle_room_version, 
                pattern="^(free|pro)_version$"
            )
        )
        application.add_handler(
            CallbackQueryHandler(list_rooms, pattern="^list_rooms$")
        )
        application.add_handler(
            CallbackQueryHandler(
                switch_room_handler, 
                pattern="^switch_room_\\d+$"
            )
        )
        application.add_handler(
            CallbackQueryHandler(
                confirm_join_handler, 
                pattern="^confirm_join_"
            )
        )
        application.add_handler(
            CallbackQueryHandler(search_room, pattern="^cancel_join$")
        )
        application.add_handler(
            CallbackQueryHandler(
                handle_room_version, 
                pattern="^(pay|stay)_"
            )
        )
        application.add_handler(
            CallbackQueryHandler(
                handle_room_context_menu,
                pattern="^(add_wish|list_wishes|list_room_users|main_menu|room_menu)$"
            )
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == '__main__':
    main()
