import random
import string
import logging
from database import (
    create_room, count_users_in_room, add_user_to_room, 
    user_has_room, room_exists, get_room_details, get_room_id_by_code, add_user
)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from keyboards import get_main_menu_keyboard, get_room_version_keyboard
from config import FREE_MAX_USERS, PRO_MAX_USERS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


def generate_room_code():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=5))


async def create_room_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã")
    
    if not update.effective_user:
        if update.message:
            await update.message.reply_text(
                '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            )
        return

    user_id = update.effective_user.id
    room_name = ' '.join(context.args) if context.args else f'–ö–æ–º–Ω–∞—Ç–∞ {generate_room_code()}'

    if user_has_room(user_id):
        if update.message:
            await update.message.reply_text("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É!")
        return

    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    room_id = create_room(name=room_name, creator_id=user_id, max_participants=5)
    
    if room_id == 0:
        if update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—ã
    room = get_room_details(room_id)
    if not room:
        if update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    keyboard = [
        [
            InlineKeyboardButton(
                "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", 
                callback_data=f"pay_full_{room_id}"
            ),
            InlineKeyboardButton(
                "–û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏", 
                callback_data=f"stay_free_{room_id}"
            )
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É "{room_name}", –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!\n'
            f'–î—Ä—É–∑—å—è –∂–¥—É—Ç –≤–∞—Å, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∏–º–∏ –∫–æ–¥–æ–º: {room["code"]}\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞:',
            reply_markup=reply_markup
        )


async def create_room_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã")
    
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    room_name = f'–ö–æ–º–Ω–∞—Ç–∞ {generate_room_code()}'

    if user_has_room(user_id):
        if update.callback_query:
            await update.callback_query.message.reply_text("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É!")
        return

    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} —á–µ—Ä–µ–∑ callback")
    room_id = create_room(room_name, user_id, max_participants=5)
    
    if room_id == 0:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—ã
    room = get_room_details(room_id)
    if not room:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    keyboard = [
        [
            InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data=f"pay_full_{room_id}"),
            InlineKeyboardButton("–û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏", callback_data=f"stay_free_{room_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.message.reply_text(
            f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É "{room_name}", –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!\n'
            f'–î—Ä—É–∑—å—è –∂–¥—É—Ç –≤–∞—Å, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∏–º–∏ –∫–æ–¥–æ–º: {room["code"]}\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞:',
            reply_markup=reply_markup
        )


async def join_room_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ")
    
    if not update.effective_user:
        if update.message:
            await update.message.reply_text('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return

    user_id = update.effective_user.id
    user_name = update.effective_user.username
    room_id = context.args[0] if context.args else None

    if not room_id:
        if update.message:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã!\n'
                '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∞—à –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: /join_room "–∫–æ–¥"'
            )
        return

    if not room_exists(room_id):
        if update.message:
            await update.message.reply_text('–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç((')
        return

    room_details = get_room_details(room_id)
    if not room_details:
        if update.message:
            await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ')
        return

    current_users = count_users_in_room(room_id)
    if current_users >= room_details['max_users']:
        if update.message:
            await update.message.reply_text(
                '–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞((\n'
                '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏ –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –°–∞–Ω—Ç—É, '
                '—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay'
            )
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
    add_user_to_room(room_id, user_id)
    if update.message:
        await update.message.reply_text(
            f'{user_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É "{room_details["name"]}"!\n'
            '–î—Ä—É–∑—å—è –∂–¥—É—Ç –æ—Ç —Ç–µ–±—è —Ç–≤–æ–µ–≥–æ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è! '
            '–ê –°–∞–Ω—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç\n\n'
            '–ß—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∂–µ–ª–∞–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É–π: /create_wish'
        )


async def join_room_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    logger.info("–í—ã–∑–≤–∞–Ω callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ")
    
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    user_name = update.effective_user.username
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
    if update.callback_query:
        await update.callback_query.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
            '/join_room "–∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã"'
        )


async def room_info_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ")
    
    room_id = context.args[0] if context.args else None
    if not room_id:
        if update.message:
            await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: /room_info *–∫–æ–¥*')
        return

    details = get_room_details(room_id)
    if details:
        status = "–ü–ª–∞—Ç–Ω–∞—è" if details["is_paid"] else "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"
        if update.message:
            await update.message.reply_text(
                f'–ö–æ–º–Ω–∞—Ç–∞: {details["name"]}\n'
                f'–°—Ç–∞—Ç—É—Å: {status}\n'
                f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {details["max_users"]}\n'
                f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {details["current_users"]}'
            )
    else:
        if update.message:
            await update.message.reply_text('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')


async def handle_room_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(
        "üéÑ –í—ã–±–µ—Ä–∏ –≤–µ—Ä—Å–∏—é –∫–æ–º–Ω–∞—Ç—ã:\n\n"
        "üéÅ *–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è:*\n"
        f"- –î–æ {FREE_MAX_USERS} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "- 1 –∂–µ–ª–∞–Ω–∏–µ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n"
        "‚ú® *PRO –≤–µ—Ä—Å–∏—è:*\n"
        f"- –î–æ {PRO_MAX_USERS} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "- 5 –∂–µ–ª–∞–Ω–∏–π –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        parse_mode='Markdown',
        reply_markup=get_room_version_keyboard()
    )


async def join_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(
        "üéÑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:\n"
        "(–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)"
    )
    context.user_data['waiting_for'] = 'room_code'


async def handle_room_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã"""
    room_code = update.message.text.strip()
    room = get_room_details(room_code)
    
    if not room:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['waiting_for'] = None
        return
    
    if room['current_users'] >= room['max_users']:
        await update.message.reply_text(
            "‚ùå –í –∫–æ–º–Ω–∞—Ç–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=get_main_menu_keyboard()
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['waiting_for'] = None
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    user = update.effective_user
    add_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
    room_id = get_room_id_by_code(room_code)
    if not room_id:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['waiting_for'] = None
        return
    
    if not add_user_to_room(room_id, user.id):
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['waiting_for'] = None
        return
    
    await update.message.reply_text(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ!\n\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {room['current_users'] + 1}/{room['max_users']}\n"
        f"–ñ–µ–ª–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ: {room['wishes_per_user']}",
        reply_markup=get_main_menu_keyboard()
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['waiting_for'] = None


async def handle_room_version(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–µ—Ä—Å–∏–∏ –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∫–æ–º–Ω–∞—Ç—ã
        is_paid = query.data == 'pro_version'
        max_participants = 20 if is_paid else 10
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–æ–º–Ω–∞—Ç—ã
        room_name = f"–ö–æ–º–Ω–∞—Ç–∞ {generate_room_code()}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        room_id = create_room(
            name=room_name,
            creator_id=user_id,
            max_participants=max_participants,
            is_paid=is_paid
        )
        
        if room_id == 0:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—ã
        room = get_room_details(room_id)
        if not room:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –∫–æ–º–Ω–∞—Ç—ã
        await query.edit_message_text(
            f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üîë –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room['code']}\n"
            f"üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {room['max_participants']}\n"
            f"üéÅ –ú–∞–∫—Å–∏–º—É–º –∂–µ–ª–∞–Ω–∏–π: {room['wishes_per_user']}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: {str(e)}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã")
