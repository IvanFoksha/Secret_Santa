import random
import string
import logging
from database import (
    create_room, count_users_in_room, add_user_to_room, user_has_room,
    room_exists, get_room_details, get_room_id_by_code, add_user,
    get_all_rooms, generate_room_code, count_user_rooms, get_user_room,
    get_room_users, update_room_version, get_user_rooms_count, MAX_ROOMS_PER_USER,
    get_user_wishes
)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from keyboards import get_main_menu_keyboard, get_room_version_keyboard
from config import FREE_MAX_USERS, PRO_MAX_USERS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


def get_room_context_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã"""
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∂–µ–ª–∞–Ω–∏—è", callback_data="list_wishes")],
        [InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã", callback_data="list_room_users")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


async def create_room_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã")
    
    if not update.effective_user:
        if update.message:
            await update.message.reply_text(
                '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            )
        return

    user_id = update.effective_user.id
    room_name = ' '.join(context.args) if context.args else f'–ö–æ–º–Ω–∞—Ç–∞ {generate_room_code()}'

    if user_has_room(user_id):
        if update.message:
            await update.message.reply_text("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É!")
        return

    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    room_id = create_room(name=room_name, creator_id=user_id, max_participants=5)
    
    if room_id == 0:
        if update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—ã
    room = get_room_details(room_id)
    if not room:
        if update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    keyboard = [
        [
            InlineKeyboardButton(
                "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", 
                callback_data=f"pay_full_{room_id}"
            ),
            InlineKeyboardButton(
                "–û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏", 
                callback_data=f"stay_free_{room_id}"
            )
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É "{room_name}", –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!\n'
            f'–î—Ä—É–∑—å—è –∂–¥—É—Ç –≤–∞—Å, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∏–º–∏ –∫–æ–¥–æ–º: {room["code"]}\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞:',
            reply_markup=reply_markup
        )


async def create_room_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã")
    
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    room_name = f'–ö–æ–º–Ω–∞—Ç–∞ {generate_room_code()}'

    if user_has_room(user_id):
        if update.callback_query:
            await update.callback_query.message.reply_text("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É!")
        return

    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} —á–µ—Ä–µ–∑ callback")
    room_id = create_room(room_name, user_id, max_participants=5)
    
    if room_id == 0:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—ã
    room = get_room_details(room_id)
    if not room:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    keyboard = [
        [
            InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data=f"pay_full_{room_id}"),
            InlineKeyboardButton("–û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏", callback_data=f"stay_free_{room_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.message.reply_text(
            f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É "{room_name}", –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!\n'
            f'–î—Ä—É–∑—å—è –∂–¥—É—Ç –≤–∞—Å, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∏–º–∏ –∫–æ–¥–æ–º: {room["code"]}\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞:',
            reply_markup=reply_markup
        )


async def join_room_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    if not update.effective_user:
        if update.message:
            await update.message.reply_text('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return

    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
    rooms_count = await get_user_rooms_count(user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç {rooms_count} –∫–æ–º–Ω–∞—Ç, –ª–∏–º–∏—Ç {MAX_ROOMS_PER_USER}")
    
    if rooms_count >= MAX_ROOMS_PER_USER:
        await update.message.reply_text(
            "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 3 –∫–æ–º–Ω–∞—Ç—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏–∑ –æ–¥–Ω–æ–π –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç, "
            "—á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–π.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    if update.message and update.message.text.startswith('/join_room'):
        args = update.message.text.split()
        if len(args) > 1:
            # –ï—Å–ª–∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —É–∫–∞–∑–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–µ
            room_code = args[1].upper()
            logger.info(f"–ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã —Å –∫–æ–¥–æ–º: {room_code}")
            
            room_id = get_room_id_by_code(room_code)
            if not room_id:
                await update.message.reply_text(
                    '‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
            room_details = get_room_details(room_id)
            if not room_details:
                await update.message.reply_text(
                    '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ',
                    reply_markup=get_main_menu_keyboard()
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
            user_room = get_user_room(user_id)
            if user_room and user_room['id'] == room_id:
                await update.message.reply_text(
                    '‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                    reply_markup=get_main_menu_keyboard()
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
            if room_details['current_users'] >= room_details['max_participants']:
                await update.message.reply_text(
                    '‚ùå –í –∫–æ–º–Ω–∞—Ç–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç',
                    reply_markup=get_main_menu_keyboard()
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–Ω–∞—Ç–µ
            message = (
                f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞:\n\n"
                f"üè† –ù–∞–∑–≤–∞–Ω–∏–µ: {room_details['name']}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {room_details['current_users']}/{room_details['max_participants']}\n"
                f"üíé –í–µ—Ä—Å–∏—è: {'PRO' if room_details['is_paid'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ?"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_join_{room_id}"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_join")
                ]
            ]
            
            await update.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –ï—Å–ª–∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω
            await update.message.reply_text(
                'üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                ]])
            )
            context.user_data['waiting_for'] = 'room_code'
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            'üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:'
        )
        context.user_data['waiting_for'] = 'room_code'


async def join_room_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ callback_data"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ callback")
    
    if not update.effective_user:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            )
        return

    user_id = update.effective_user.id
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ callback_data
    room_id = int(query.data.split('_')[2])
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    room = get_room_details(room_id)
    if not room:
        await query.message.reply_text(
            '‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
    user_room = get_user_room(user_id)
    if user_room['room_id'] == room_id:
        await query.message.reply_text(
            '‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rooms_count = count_user_rooms(user_id)
    if user_rooms_count >= 3:
        await query.message.reply_text(
            '‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∫–æ–º–Ω–∞—Ç (–º–∞–∫—Å–∏–º—É–º 3). '
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∏–Ω—å—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç.'
        )
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    success = add_user_to_room(room_id, user_id)
    if success:
        await query.message.reply_text(
            f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ "{room["name"]}"!\n'
            f'üîë –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room["code"]}\n'
            f'üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count_users_in_room(room_id)}/'
            f'{room["max_participants"]}'
        )
    else:
        await query.message.reply_text(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. '
            '–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'
        )


async def room_info_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ")
    
    room_id = context.args[0] if context.args else None
    if not room_id:
        if update.message:
            await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: /room_info *–∫–æ–¥*')
        return

    details = get_room_details(room_id)
    if details:
        status = "–ü–ª–∞—Ç–Ω–∞—è" if details["is_paid"] else "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"
        if update.message:
            await update.message.reply_text(
                f'–ö–æ–º–Ω–∞—Ç–∞: {details["name"]}\n'
                f'–°—Ç–∞—Ç—É—Å: {status}\n'
                f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {details["max_participants"]}\n'
                f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {details["current_users"]}'
            )
    else:
        if update.message:
            await update.message.reply_text('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')


async def handle_room_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        rooms_count = await get_user_rooms_count(user_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç {rooms_count} –∫–æ–º–Ω–∞—Ç, –ª–∏–º–∏—Ç {MAX_ROOMS_PER_USER}")
        
        if rooms_count >= MAX_ROOMS_PER_USER:
            await query.message.edit_text(
                "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 3 –∫–æ–º–Ω–∞—Ç—ã. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç, "
                "—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ –ë–î
        room_id = await create_room(user_id)
        if not room_id:
            await query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['creating_room_id'] = room_id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–µ—Ä—Å–∏–∏
        await query.message.edit_text(
            "üéÑ –í—ã–±–µ—Ä–∏ –≤–µ—Ä—Å–∏—é –∫–æ–º–Ω–∞—Ç—ã:\n\n"
            "üéÅ *–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è:*\n"
            f"- –î–æ {FREE_MAX_USERS} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "- 1 –∂–µ–ª–∞–Ω–∏–µ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n"
            "‚ú® *PRO –≤–µ—Ä—Å–∏—è:*\n"
            f"- –î–æ {PRO_MAX_USERS} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "- 5 –∂–µ–ª–∞–Ω–∏–π –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
            "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            parse_mode='Markdown',
            reply_markup=get_room_version_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in handle_room_creation: {e}")
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )


async def join_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(
        "üéÑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:\n"
        "(–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)"
    )
    context.user_data['waiting_for'] = 'room_code'


async def handle_room_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã"""
    if not context.user_data.get('waiting_for') == 'room_code':
        return
        
    user_id = update.effective_user.id
    room_code = update.message.text.upper()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∫–æ–¥—É
    room_id = get_room_id_by_code(room_code)
    if not room_id:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–Ω–∞—Ç–∞
    if not room_exists(room_id):
        await update.message.reply_text(
            "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
    if user_has_room(user_id):
        await update.message.reply_text(
            "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ. "
            "–ü–æ–∫–∏–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    users_count = count_users_in_room(room_id)
    room = get_room_details(room_id)
    
    if users_count >= room['max_participants']:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ."
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
    success = add_user_to_room(user_id, room_id)
    if success:
        await update.message.reply_text(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ!\n\n"
            f"üè† –ù–∞–∑–≤–∞–Ω–∏–µ: {room['name']}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {users_count + 1}/{room['max_participants']}\n"
            f"üéÅ –ú–∞–∫—Å–∏–º—É–º –∂–µ–ª–∞–Ω–∏–π: {room['max_wishes']}",
            reply_markup=get_room_context_menu()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.pop('waiting_for', None)


async def handle_room_version(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–µ—Ä—Å–∏–∏ –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º callback_data
    callback_data = query.data
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    if callback_data == "free_version":
        version = "free"
    elif callback_data == "pro_version":
        version = "pro"
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–º–Ω–∞—Ç—ã: {callback_data}")
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–µ—Ä—Å–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    room_id = context.user_data.get('creating_room_id')
    if not room_id:
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –µ—ë –∫–æ–¥
        room_info = get_room_details(room_id)
        if not room_info:
            await query.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
            
        room_code = room_info['code']
        
        if version == "free":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
            await update_room_version(room_id, "free")
            await query.message.edit_text(
                "üéÅ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏!\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
                "- –î–æ 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                "- 1 –∂–µ–ª–∞–Ω–∏–µ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n"
                f"üîë –ö–æ–¥ –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã: {room_code}",
                reply_markup=get_room_context_menu()
            )
        elif version == "pro":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ PRO –≤–µ—Ä—Å–∏—é
            await update_room_version(room_id, "pro")
            await query.message.edit_text(
                "‚ú® –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ PRO –≤–µ—Ä—Å–∏–∏!\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
                "- –î–æ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                "- 5 –∂–µ–ª–∞–Ω–∏–π –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
                "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                f"üîë –ö–æ–¥ –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã: {room_code}",
                reply_markup=get_room_context_menu()
            )
        
        # –û—á–∏—â–∞–µ–º ID —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('creating_room_id', None)
        
    except Exception as e:
        logger.error(f"Error in handle_room_version: {e}")
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu_keyboard()
        )


async def list_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç")
    
    if not update.effective_user:
        if update.callback_query:
            await update.callback_query.message.reply_text('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return

    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        rooms = get_all_rooms(user_id)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: {len(rooms)}")
        
        if not rooms:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π!"
            if update.callback_query:
                await update.callback_query.message.edit_text(text, reply_markup=get_main_menu_keyboard())
            else:
                await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())
            return
            
        message = "üìã –í–∞—à–∏ –∫–æ–º–Ω–∞—Ç—ã:\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã
        keyboard = []
        for i, room in enumerate(rooms, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            room_name = room.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            room_code = room.get('code', '–ù–µ—Ç –∫–æ–¥–∞')
            room_id = room.get('id', 0)
            current_users = room.get('current_users', 0)
            max_participants = room.get('max_participants', 0)
            is_paid = room.get('is_paid', False)
            is_creator = room.get('is_creator', False)
            is_current = room.get('is_current', False)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
            status = []
            if is_creator:
                status.append("–í—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å")
            if is_current:
                status.append("–¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞")
            
            status_text = f" ({', '.join(status)})" if status else ""
            
            message += (
                f"{i}. {room_name}{status_text}\n"
                f"   üîë –ö–æ–¥: {room_code}\n"
                f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_users}/{max_participants}\n"
                f"   {'üíé PRO' if is_paid else 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É
            keyboard.append([
                InlineKeyboardButton(
                    f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ {room_name}", 
                    callback_data=f"switch_room_{room_id}"
                )
            ])
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        if update.callback_query:
            await update.callback_query.message.edit_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç: {str(e)}")
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if update.callback_query:
            await update.callback_query.message.edit_text(text, reply_markup=get_main_menu_keyboard())
        else:
            await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())


async def search_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∫–æ–¥—É"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã")
    
    if not update.effective_user:
        if update.message:
            await update.message.reply_text('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return

    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search_room
    if update.message and update.message.text.startswith('/search_room'):
        await update.message.reply_text(
            'üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        context.user_data['waiting_for'] = 'room_search'
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
    if update.message and context.user_data.get('waiting_for') == 'room_search':
        room_code = update.message.text.strip().upper()
        logger.info(f"–ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã —Å –∫–æ–¥–æ–º: {room_code}")
        
        room_id = get_room_id_by_code(room_code)
        if not room_id:
            await update.message.reply_text(
                '‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                reply_markup=get_main_menu_keyboard()
            )
            context.user_data.pop('waiting_for', None)
            return
        
        room_details = get_room_details(room_id)
        if not room_details:
            await update.message.reply_text(
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ',
                reply_markup=get_main_menu_keyboard()
            )
            context.user_data.pop('waiting_for', None)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–Ω–∞—Ç–µ
        message = (
            f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞:\n\n"
            f"üè† –ù–∞–∑–≤–∞–Ω–∏–µ: {room_details['name']}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {room_details['current_users']}/{room_details['max_participants']}\n"
            f"üíé –í–µ—Ä—Å–∏—è: {'PRO' if room_details['is_paid'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}\n"
            f"üîë –ö–æ–¥: {room_details['code']}\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ?"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_join_{room_id}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_join")
            ]
        ]
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data.pop('waiting_for', None)

async def confirm_join_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    try:
        room_id = int(query.data.split('_')[2])
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        rooms_count = await get_user_rooms_count(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç {rooms_count} –∫–æ–º–Ω–∞—Ç, –ª–∏–º–∏—Ç {MAX_ROOMS_PER_USER}")
        
        if rooms_count >= MAX_ROOMS_PER_USER:
            await query.message.edit_text(
                "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 3 –∫–æ–º–Ω–∞—Ç—ã. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏–∑ –æ–¥–Ω–æ–π –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç, "
                "—á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–π.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        room = get_room_details(room_id)
        if not room:
            await query.message.edit_text(
                '‚ùå –ö–æ–º–Ω–∞—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                reply_markup=get_main_menu_keyboard()
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
        if room['current_users'] >= room['max_participants']:
            await query.message.edit_text(
                '‚ùå –í –∫–æ–º–Ω–∞—Ç–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç',
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
        user_room = get_user_room(user_id)
        if user_room and user_room['id'] == room_id:
            await query.message.edit_text(
                '‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                reply_markup=get_main_menu_keyboard()
            )
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        if add_user_to_room(room_id, user_id):
            await query.message.edit_text(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ!\n"
                f"üè† –ù–∞–∑–≤–∞–Ω–∏–µ: {room['name']}\n"
                f"üîë –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room['code']}",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await query.message.edit_text(
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ',
                reply_markup=get_main_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ: {str(e)}")
        await query.message.edit_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞',
            reply_markup=get_main_menu_keyboard()
        )

async def handle_room_context_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_data: {action}")
    
    if action == "add_wish":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è
        await query.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ (–¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="room_menu")
            ]])
        )
        context.user_data['waiting_for'] = 'wish_text'
        
    elif action == "list_wishes":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π
        user_id = query.from_user.id
        user_room = get_user_room(user_id)
        
        if not user_room:
            await query.message.edit_text(
                "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ç–∏–ø
        room_id = user_room.get('id')
        if not room_id:
            await query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–æ–º–Ω–∞—Ç—ã.",
                reply_markup=get_main_menu_keyboard()
            )
            return
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_user_wishes
        wishes = get_user_wishes(user_id, int(room_id))
        
        if not wishes:
            await query.message.edit_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.",
                reply_markup=get_room_context_menu()
            )
            return
            
        message = "üìã –í–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è:\n\n"
        for i, wish in enumerate(wishes, 1):
            wish_text = wish.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')
            message += f"{i}. {wish_text}\n"
            
        await query.message.edit_text(
            message,
            reply_markup=get_room_context_menu()
        )
        
    elif action == "list_room_users":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
        user_id = query.from_user.id
        user_room = get_user_room(user_id)
        
        if not user_room:
            await query.message.edit_text(
                "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return
            
        room_id = user_room.get('id')
        if not room_id:
            await query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–æ–º–Ω–∞—Ç—ã.",
                reply_markup=get_main_menu_keyboard()
            )
            return
            
        room = get_room_details(room_id)
        if not room:
            await query.message.edit_text(
                "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
            
        users = get_room_users(room_id)
        message = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã '{room['name']}':\n\n"
        
        for user in users:
            role = "üëë –°–æ–∑–¥–∞—Ç–µ–ª—å" if user.get('id') == room.get('creator_id') else "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
            first_name = user.get('first_name', '')
            last_name = user.get('last_name', '')
            message += f"{role}: {first_name} {last_name or ''}\n"
            
        await query.message.edit_text(
            message,
            reply_markup=get_room_context_menu()
        )
        
    elif action == "main_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        
    elif action == "room_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–æ–º–Ω–∞—Ç—ã
        await query.message.edit_text(
            "–ú–µ–Ω—é –∫–æ–º–Ω–∞—Ç—ã:",
            reply_markup=get_room_context_menu()
        )

async def delete_room_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ callback_data
        room_id = int(query.data.split('_')[2])
        user_id = query.from_user.id
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã {room_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        room_info = get_room_details(room_id)
        if not room_info:
            await query.message.edit_text(
                "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        await query.message.edit_text(
            f"üóëÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É '{room_info['name']}'?\n\n"
            "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. "
            "–í—Å–µ –∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{room_id}"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
                ]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é –∫–æ–º–Ω–∞—Ç—ã: {e}")
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )


async def confirm_delete_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ callback_data
        room_id = int(query.data.split('_')[2])
        user_id = query.from_user.id
        
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã {room_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        from database import delete_room
        if delete_room(room_id, user_id):
            await query.message.edit_text(
                "‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: {e}")
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )


async def cancel_delete_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    await query.message.edit_text(
        "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_keyboard()
    )
