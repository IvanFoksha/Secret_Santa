import random
import string
import logging
from database import (
    create_room, count_users_in_room, add_user_to_room, 
    user_has_room, room_exists, get_room_details, get_room_id_by_code, add_user, get_all_rooms, generate_room_code, count_user_rooms, get_user_room, get_room_users
)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from keyboards import get_main_menu_keyboard, get_room_version_keyboard
from config import FREE_MAX_USERS, PRO_MAX_USERS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


def get_room_context_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã"""
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∂–µ–ª–∞–Ω–∏—è", callback_data="list_wishes")],
        [InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã", callback_data="list_room_users")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


async def create_room_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã")
    
    if not update.effective_user:
        if update.message:
            await update.message.reply_text(
                '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            )
        return

    user_id = update.effective_user.id
    room_name = ' '.join(context.args) if context.args else f'–ö–æ–º–Ω–∞—Ç–∞ {generate_room_code()}'

    if user_has_room(user_id):
        if update.message:
            await update.message.reply_text("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É!")
        return

    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    room_id = create_room(name=room_name, creator_id=user_id, max_participants=5)
    
    if room_id == 0:
        if update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—ã
    room = get_room_details(room_id)
    if not room:
        if update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    keyboard = [
        [
            InlineKeyboardButton(
                "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", 
                callback_data=f"pay_full_{room_id}"
            ),
            InlineKeyboardButton(
                "–û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏", 
                callback_data=f"stay_free_{room_id}"
            )
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É "{room_name}", –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!\n'
            f'–î—Ä—É–∑—å—è –∂–¥—É—Ç –≤–∞—Å, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∏–º–∏ –∫–æ–¥–æ–º: {room["code"]}\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞:',
            reply_markup=reply_markup
        )


async def create_room_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã")
    
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    room_name = f'–ö–æ–º–Ω–∞—Ç–∞ {generate_room_code()}'

    if user_has_room(user_id):
        if update.callback_query:
            await update.callback_query.message.reply_text("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É!")
        return

    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} —á–µ—Ä–µ–∑ callback")
    room_id = create_room(room_name, user_id, max_participants=5)
    
    if room_id == 0:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—ã
    room = get_room_details(room_id)
    if not room:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    keyboard = [
        [
            InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data=f"pay_full_{room_id}"),
            InlineKeyboardButton("–û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏", callback_data=f"stay_free_{room_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.message.reply_text(
            f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É "{room_name}", –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!\n'
            f'–î—Ä—É–∑—å—è –∂–¥—É—Ç –≤–∞—Å, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∏–º–∏ –∫–æ–¥–æ–º: {room["code"]}\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞:',
            reply_markup=reply_markup
        )


async def join_room_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ")
    
    if not update.effective_user:
        if update.message:
            await update.message.reply_text('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return

    user_id = update.effective_user.id
    user_name = update.effective_user.username
    
    # –ï—Å–ª–∏ —ç—Ç–æ callback query, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
    if update.callback_query:
        await update.callback_query.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
            '/join_room "–∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã"'
        )
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –∫–æ–º–Ω–∞—Ç—ã (–Ω–µ –∫–æ–º–∞–Ω–¥–∞)
    if update.message and not update.message.text.startswith('/'):
        room_code = update.message.text.strip().upper()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –∫–æ–¥–æ–º {room_code}")
        
        room_id = get_room_id_by_code(room_code)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω ID –∫–æ–º–Ω–∞—Ç—ã: {room_id}")
        
        if room_id == 0:
            await update.message.reply_text(
                '‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            )
            return

        if not room_exists(room_id):
            logger.error(f"–ö–æ–º–Ω–∞—Ç–∞ {room_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await update.message.reply_text(
                '‚ùå –ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç((' 
            )
            return

        room_details = get_room_details(room_id)
        if not room_details:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—ã {room_id}")
            await update.message.reply_text(
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ'
            )
            return

        current_users = count_users_in_room(room_id)
        logger.info(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ: {current_users}")
        
        if current_users >= room_details['max_participants']:
            await update.message.reply_text(
                '‚ùå –ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞((\n'
                '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏ –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –°–∞–Ω—Ç—É, '
                '—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay'
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_rooms_count = count_user_rooms(user_id)
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_rooms_count}")
        
        if user_rooms_count >= 3:
            await update.message.reply_text(
                "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–æ–º–Ω–∞—Ç (3). "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∏–Ω—å—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–Ω–∞—Ç, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–π."
            )
            return

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
        success = add_user_to_room(room_id, user_id)
        if success:
            await update.message.reply_text(
                f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ "{room_details["name"]}"!\n'
                f'üîë –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room_details["code"]}\n'
                f'üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count_users_in_room(room_id)}/{room_details["max_participants"]}'
            )
        else:
            await update.message.reply_text(
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'
            )
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /join_room
    if not context.args:
        await update.message.reply_text(
            '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã!\n'
            '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∞—à –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: /join_room "–∫–æ–¥"'
        )
        return

    room_code = context.args[0].upper()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –∫–æ–¥–æ–º {room_code}")
    
    room_id = get_room_id_by_code(room_code)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω ID –∫–æ–º–Ω–∞—Ç—ã: {room_id}")
    
    if room_id == 0:
        await update.message.reply_text(
            '‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        )
        return

    if not room_exists(room_id):
        logger.error(f"–ö–æ–º–Ω–∞—Ç–∞ {room_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await update.message.reply_text(
            '‚ùå –ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç(('
        )
        return

    room_details = get_room_details(room_id)
    if not room_details:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—ã {room_id}")
        await update.message.reply_text(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ'
        )
        return

    current_users = count_users_in_room(room_id)
    logger.info(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ: {current_users}")
    
    if current_users >= room_details['max_participants']:
        await update.message.reply_text(
            '‚ùå –ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞((\n'
            '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏ –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –°–∞–Ω—Ç—É, '
            '—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay'
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rooms_count = count_user_rooms(user_id)
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_rooms_count}")
    
    if user_rooms_count >= 3:
        await update.message.reply_text(
            "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–æ–º–Ω–∞—Ç (3). "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∏–Ω—å—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–Ω–∞—Ç, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–π."
        )
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
    success = add_user_to_room(room_id, user_id)
    if success:
        await update.message.reply_text(
            f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ "{room_details["name"]}"!\n'
            f'üîë –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room_details["code"]}\n'
            f'üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count_users_in_room(room_id)}/{room_details["max_participants"]}'
        )
    else:
        await update.message.reply_text(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'
        )


async def join_room_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ callback_data"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ callback")
    
    if not update.effective_user:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            )
        return

    user_id = update.effective_user.id
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ callback_data
    room_id = int(query.data.split('_')[2])
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    room = get_room_details(room_id)
    if not room:
        await query.message.reply_text(
            '‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
    user_room = get_user_room(user_id)
    if user_room['room_id'] == room_id:
        await query.message.reply_text(
            '‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rooms_count = count_user_rooms(user_id)
    if user_rooms_count >= 3:
        await query.message.reply_text(
            '‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∫–æ–º–Ω–∞—Ç (–º–∞–∫—Å–∏–º—É–º 3). '
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∏–Ω—å—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç.'
        )
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    success = add_user_to_room(room_id, user_id)
    if success:
        await query.message.reply_text(
            f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ "{room["name"]}"!\n'
            f'üîë –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room["code"]}\n'
            f'üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count_users_in_room(room_id)}/'
            f'{room["max_participants"]}'
        )
    else:
        await query.message.reply_text(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. '
            '–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'
        )


async def room_info_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ")
    
    room_id = context.args[0] if context.args else None
    if not room_id:
        if update.message:
            await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: /room_info *–∫–æ–¥*')
        return

    details = get_room_details(room_id)
    if details:
        status = "–ü–ª–∞—Ç–Ω–∞—è" if details["is_paid"] else "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"
        if update.message:
            await update.message.reply_text(
                f'–ö–æ–º–Ω–∞—Ç–∞: {details["name"]}\n'
                f'–°—Ç–∞—Ç—É—Å: {status}\n'
                f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {details["max_participants"]}\n'
                f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {details["current_users"]}'
            )
    else:
        if update.message:
            await update.message.reply_text('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')


async def handle_room_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(
        "üéÑ –í—ã–±–µ—Ä–∏ –≤–µ—Ä—Å–∏—é –∫–æ–º–Ω–∞—Ç—ã:\n\n"
        "üéÅ *–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è:*\n"
        f"- –î–æ {FREE_MAX_USERS} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "- 1 –∂–µ–ª–∞–Ω–∏–µ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n"
        "‚ú® *PRO –≤–µ—Ä—Å–∏—è:*\n"
        f"- –î–æ {PRO_MAX_USERS} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "- 5 –∂–µ–ª–∞–Ω–∏–π –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        parse_mode='Markdown',
        reply_markup=get_room_version_keyboard()
    )


async def join_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(
        "üéÑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:\n"
        "(–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)"
    )
    context.user_data['waiting_for'] = 'room_code'


async def handle_room_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã"""
    if not context.user_data.get('waiting_for') == 'room_code':
        return
        
    user_id = update.effective_user.id
    room_code = update.message.text.upper()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∫–æ–¥—É
    room_id = get_room_id_by_code(room_code)
    if not room_id:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–Ω–∞—Ç–∞
    if not room_exists(room_id):
        await update.message.reply_text(
            "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
    if user_has_room(user_id):
        await update.message.reply_text(
            "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ. "
            "–ü–æ–∫–∏–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    users_count = count_users_in_room(room_id)
    room = get_room_details(room_id)
    
    if users_count >= room['max_participants']:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ."
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
    success = add_user_to_room(user_id, room_id)
    if success:
        await update.message.reply_text(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ!\n\n"
            f"üè† –ù–∞–∑–≤–∞–Ω–∏–µ: {room['name']}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {users_count + 1}/{room['max_participants']}\n"
            f"üéÅ –ú–∞–∫—Å–∏–º—É–º –∂–µ–ª–∞–Ω–∏–π: {room['max_wishes']}",
            reply_markup=get_room_context_menu()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.pop('waiting_for', None)


async def handle_room_version(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–µ—Ä—Å–∏–∏ –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split('_')
    action = data[0]
    room_id = int(data[2])
    
    if action == "pay":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        await query.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ.",
            reply_markup=get_room_context_menu()
        )
    elif action == "stay":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        await query.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!",
            reply_markup=get_room_context_menu()
        )


async def list_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç")
    
    if not update.effective_user:
        if update.callback_query:
            await update.callback_query.message.reply_text('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return

    user_id = update.effective_user.id
    
    try:
        rooms = get_all_rooms(user_id)
        
        if not rooms:
            if update.callback_query:
                await update.callback_query.message.reply_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π!"
                )
            return
            
        message = "üìã –í–∞—à–∏ –∫–æ–º–Ω–∞—Ç—ã:\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã
        keyboard = []
        for i, room in enumerate(rooms, 1):
            message += (
                f"{i}. {room['name']}\n"
                f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {room['current_users']}/{room['max_participants']}\n"
                f"   {'üíé PRO' if room['is_paid'] else 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É
            keyboard.append([
                InlineKeyboardButton(
                    f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ {room['name']}", 
                    callback_data=f"switch_room_{room['id']}"
                )
            ])
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        if update.callback_query:
            await update.callback_query.message.edit_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç: {str(e)}")
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )


async def search_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∫–æ–¥—É"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã")
    
    if not update.effective_user:
        if update.message:
            await update.message.reply_text('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return

    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search_room
    if update.message and update.message.text.startswith('/search_room'):
        await update.message.reply_text(
            'üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        context.user_data['waiting_for'] = 'room_search'
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
    if update.message and context.user_data.get('waiting_for') == 'room_search':
        room_code = update.message.text.strip().upper()
        logger.info(f"–ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã —Å –∫–æ–¥–æ–º: {room_code}")
        
        room_id = get_room_id_by_code(room_code)
        if not room_id:
            await update.message.reply_text(
                '‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                reply_markup=get_main_menu_keyboard()
            )
            context.user_data.pop('waiting_for', None)
            return
        
        room_details = get_room_details(room_id)
        if not room_details:
            await update.message.reply_text(
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ',
                reply_markup=get_main_menu_keyboard()
            )
            context.user_data.pop('waiting_for', None)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–Ω–∞—Ç–µ
        message = (
            f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞:\n\n"
            f"üè† –ù–∞–∑–≤–∞–Ω–∏–µ: {room_details['name']}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {room_details['current_users']}/{room_details['max_participants']}\n"
            f"üíé –í–µ—Ä—Å–∏—è: {'PRO' if room_details['is_paid'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}\n"
            f"üîë –ö–æ–¥: {room_details['code']}\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ?"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_join_{room_id}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_join")
            ]
        ]
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data.pop('waiting_for', None)

async def confirm_join_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    try:
        room_id = int(query.data.split('_')[2])
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        room = get_room_details(room_id)
        if not room:
            await query.message.reply_text('‚ùå –ö–æ–º–Ω–∞—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
        if room['current_users'] >= room['max_participants']:
            await query.message.reply_text('‚ùå –í –∫–æ–º–Ω–∞—Ç–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç')
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        if add_user_to_room(room_id, user_id):
            await query.message.reply_text(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ!\n"
                f"üè† –ù–∞–∑–≤–∞–Ω–∏–µ: {room['name']}\n"
                f"üîë –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room['code']}",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await query.message.reply_text(
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ',
                reply_markup=get_main_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ: {str(e)}")
        await query.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞',
            reply_markup=get_main_menu_keyboard()
        )

async def handle_room_context_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    if action == "add_wish":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è
        await query.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ (–¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="room_menu")
            ]])
        )
        context.user_data['waiting_for'] = 'wish_text'
        
    elif action == "list_wishes":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π
        user_id = query.from_user.id
        user_room = get_user_room(user_id)
        
        if not user_room:
            await query.message.edit_text(
                "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return
            
        wishes = list_wishes(user_id, user_room['room_id'])
        if not wishes:
            await query.message.edit_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.",
                reply_markup=get_room_context_menu()
            )
            return
            
        message = "üìã –í–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è:\n\n"
        for i, wish in enumerate(wishes, 1):
            message += f"{i}. {wish['text']}\n"
            
        await query.message.edit_text(
            message,
            reply_markup=get_room_context_menu()
        )
        
    elif action == "list_room_users":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
        user_id = query.from_user.id
        user_room = get_user_room(user_id)
        
        if not user_room:
            await query.message.edit_text(
                "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return
            
        room = get_room_details(user_room['room_id'])
        if not room:
            await query.message.edit_text(
                "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
            
        users = get_room_users(user_room['room_id'])
        message = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã '{room['name']}':\n\n"
        
        for user in users:
            role = "üëë –°–æ–∑–¥–∞—Ç–µ–ª—å" if user['id'] == room['creator_id'] else "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
            message += f"{role}: {user['first_name']} {user['last_name'] or ''}\n"
            
        await query.message.edit_text(
            message,
            reply_markup=get_room_context_menu()
        )
        
    elif action == "main_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        
    elif action == "room_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–æ–º–Ω–∞—Ç—ã
        await query.message.edit_text(
            "–ú–µ–Ω—é –∫–æ–º–Ω–∞—Ç—ã:",
            reply_markup=get_room_context_menu()
        )
